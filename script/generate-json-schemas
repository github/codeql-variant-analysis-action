#!/bin/bash

set -eu

cd "$(dirname "$0")/.."

# Generate the schemas to a temporary directory and then move them into their
# canonical positions at the end. This means we can wipe the src/json-schemas
# directory to ensure that it only contains correct generated files. But also
# works around the requirement that the schemas must exist during generation,
# because they are imported by the typescript, so we cannot compile it to
# generate the schemas unless all imported schemas files exist.
rm -rf json-schemas-tmp
mkdir json-schemas-tmp

generate_schema () {
    npx ts-json-schema-generator \
      --path $1 \
      --type $2 \
      --out json-schemas-tmp/$2.json \
      --tsconfig tsconfig.json \
      --additional-properties true \
      --no-type-check
}

generate_schema ./src/inputs.ts RepoArray
generate_schema ./src/inputs.ts Instructions
generate_schema ./src/codeql.ts Sarif
generate_schema ./src/codeql.ts BQRSInfo
generate_schema ./src/codeql.ts ResolvedQueries
generate_schema ./src/codeql.ts ResolvedDatabase
generate_schema ./src/codeql.ts QueryMetadata
generate_schema ./src/gh-api-client.ts RepoTask
generate_schema ./src/gh-api-client.ts Policy

rm -rf src/json-schemas/*
mv json-schemas-tmp/* src/json-schemas
rmdir json-schemas-tmp
